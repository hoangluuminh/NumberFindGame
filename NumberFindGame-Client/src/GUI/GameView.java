package GUI;

import BUS.GameBUS;
import GUI.Components.LevelNodeButton;
import Models.Game;
import Models.LevelNode;

import javax.swing.*;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

public class GameView {
    // GameView.form's Components
    public JPanel contentPane;
    private JLabel lblPlayerScore;
    private JButton btnQuit;
    private JPanel gamePane;
    private JPanel infoPane;
    private JList listPlayers;
    private JLabel lblTimer;

    private GameBUS gameBUS;

    public GameView() {
        $$$setupUI$$$();
        customizeComponents();
        bindListeners();
    }

    private void customizeComponents() {
        gamePane.setLayout(null);
    }

    private void bindListeners() {
        gamePane.addAncestorListener(new AncestorListener() {
            @Override
            public void ancestorAdded(AncestorEvent event) {
                // Start game
                gameBUS = new GameBUS();
                renderLevel(gameBUS.getGame());
            }

            @Override
            public void ancestorRemoved(AncestorEvent event) {
            }

            @Override
            public void ancestorMoved(AncestorEvent event) {
            }
        });

        btnQuit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("NotImplemented: Quit Game");
            }
        });
    }

    private void renderLevel(Game game) {
        int btnSize = 30;                                                              // Kích thước của Button hiển thị
        int screenMargin = 15;     // Margin của Màn hình trận đấu, giúp cho Nút không bị che khuất bởi phạm vi hiển thị

        Rectangle gameRect = new Rectangle();  // gameRect lưu trữ vị trí, kích thước của khung MÀN HÌNH TRẬN ĐẤU lúc bấy giờ => Không cho phép resize
        gameRect.setRect(gamePane.getX(), gamePane.getY(), gamePane.getWidth(), gamePane.getHeight());

        for (LevelNode levelNode : game.getLevel()) {
            int posX =     // Vị trí mà LevelNode được đặt trên màn hình tương ứng với tỉ lệ của LevelNode.coord ([0,1])
                    (int) (
                            (levelNode.getCoord().x                    // coord.x là vị trí x của LevelNode, nằm trong [0,1]
                                    * (gameRect.width - screenMargin * 2))       // Chiều rộng màn hình trừ margin trái phải
                                    +
                                    (gameRect.x + screenMargin)  // Cộng với vị trí TopLeft của Màn hình trận đầu, Cộng với Margin trái
                    )
                            -
                            (btnSize / 2);  // Việc trừ cho nửa kích thước Button hiển thị giúp cho Button hiển thị đúng ở Center thay vì ở TopLeft
            int posY =
                    (int) (
                            (levelNode.getCoord().y
                                    * (gameRect.height - screenMargin * 2))
                                    +
                                    (gameRect.y + screenMargin)
                    )
                            -
                            (btnSize / 2);

            LevelNodeButton btn = new LevelNodeButton(levelNode.getValue(), new Point(posX, posY));
            levelNode.setButton(btn);
            btn.addToContainer(gamePane);
            btn.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    System.out.println(levelNode.getValue());
                }
            });
        }
        gamePane.repaint();
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        contentPane.setBackground(new Color(-1049857));
        gamePane = new JPanel();
        gamePane.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        gamePane.setBackground(new Color(-16747891));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(gamePane, gbc);
        infoPane = new JPanel();
        infoPane.setLayout(new GridBagLayout());
        infoPane.setBackground(new Color(-1));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(infoPane, gbc);
        btnQuit = new JButton();
        btnQuit.setText("Quit");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        infoPane.add(btnQuit, gbc);
        lblPlayerScore = new JLabel();
        Font lblPlayerScoreFont = this.$$$getFont$$$(null, -1, 32, lblPlayerScore.getFont());
        if (lblPlayerScoreFont != null) lblPlayerScore.setFont(lblPlayerScoreFont);
        lblPlayerScore.setText("10");
        lblPlayerScore.putClientProperty("html.disable", Boolean.FALSE);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.insets = new Insets(20, 0, 20, 0);
        infoPane.add(lblPlayerScore, gbc);
        listPlayers = new JList();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        infoPane.add(listPlayers, gbc);
        lblTimer = new JLabel();
        Font lblTimerFont = this.$$$getFont$$$(null, -1, 21, lblTimer.getFont());
        if (lblTimerFont != null) lblTimer.setFont(lblTimerFont);
        lblTimer.setText("3:00");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        infoPane.add(lblTimer, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
